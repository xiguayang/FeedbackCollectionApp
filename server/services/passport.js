const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20');
const mongoose = require('mongoose');
const keys = require('../config/keys');
//the model class: pull out the model of mongoose
const User = mongoose.model('users');
//call serilizeUser with the user to generate the identifying piece of info
passport.serializeUser((user, done) => {
	//user.id is the id generated by MongoDB
	done(null, user.id);
});
//deserilizeUser: search the Mongo model instance by the given id
passport.deserializeUser((id, done) => {
	User.findById(id).then((user) => {
		done(null, user);
	});
});
//create a new GoogelStrategy object
passport.use(
	new GoogleStrategy(
		{
			clientID: keys.googleClientID,
			clientSecret: keys.googleClientSecret,
			callbackURL: '/auth/google/callback',
			proxy: true,
		},
		// (accessToken, refreshToken, profile, done) => {
		// 	//a query: inside users collection, find the first record which is same with googleId
		// 	//this query returns a promise
		// 	User.findOne({ googleId: profile.id }).then((existingUser) => {
		// 		if (existingUser) {
		// 			//we already have a record with the given profile id
		// 			done(null, existingUser);
		// 		} else {
		// 			//we don't have a user record with this id, make a new user
		// 			//create a new Model instance using goolge profile.id
		// 			//and save it to the db
		// 			new User({ googleId: profile.id }).save().then((user) => done(null, user));
		// 		}
		// 	});
		// }
		//refactor the promise by using async/await syntax
		async (accessToken, refreshToken, profile, done) => {
			const existingUser = await User.findOne({ googleId: profile.id });
			if (existingUser) {
				done(null, existingUser);
			}
			const user = await new User({ googleId: profile.id }).save();
			done(null, user);
		}
	)
);
